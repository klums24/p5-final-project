{"ast":null,"code":"// eslint-disable-next-line no-unused-vars\nconst {\n  InlineTextBuilder\n} = require('./inline-text-builder');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\nfunction charactersToCodes(str) {\n  return [...str].map(c => '\\\\u' + c.charCodeAt(0).toString(16).padStart(4, '0')).join('');\n}\n\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */\nclass WhitespaceProcessor {\n  /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */\n  constructor(options) {\n    this.whitespaceChars = options.preserveNewlines ? options.whitespaceCharacters.replace(/\\n/g, '') : options.whitespaceCharacters;\n    const whitespaceCodes = charactersToCodes(this.whitespaceChars);\n    this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);\n    this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);\n    this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);\n    if (options.preserveNewlines) {\n      const wordOrNewlineRe = new RegExp(`\\n|[^\\n${whitespaceCodes}]+`, 'gm');\n\n      /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       */\n      this.shrinkWrapAdd = function (text, inlineTextBuilder) {\n        let transform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : str => str;\n        if (!text) {\n          return;\n        }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordOrNewlineRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (m[0] === '\\n') {\n            inlineTextBuilder.startNewLine();\n          } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordOrNewlineRe.exec(text)) !== null) {\n            if (m[0] === '\\n') {\n              inlineTextBuilder.startNewLine();\n            } else {\n              inlineTextBuilder.pushWord(transform(m[0]));\n            }\n          }\n        }\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n        // No need to stash a space in case last added item was a new line,\n        // but that won't affect anything later anyway.\n      };\n    } else {\n      const wordRe = new RegExp(`[^${whitespaceCodes}]+`, 'g');\n      this.shrinkWrapAdd = function (text, inlineTextBuilder) {\n        let transform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : str => str;\n        if (!text) {\n          return;\n        }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordRe.exec(text)) !== null) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          }\n        }\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n      };\n    }\n  }\n\n  /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testLeadingWhitespace(text) {\n    return this.leadingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text ends with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testTrailingWhitespace(text) {\n    return this.trailingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text contains any non-whitespace characters.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testContainsWords(text) {\n    return !this.allWhitespaceOrEmptyRe.test(text);\n  }\n}\nmodule.exports = {\n  WhitespaceProcessor: WhitespaceProcessor\n};","map":{"version":3,"names":["InlineTextBuilder","require","charactersToCodes","str","map","c","charCodeAt","toString","padStart","join","WhitespaceProcessor","constructor","options","whitespaceChars","preserveNewlines","whitespaceCharacters","replace","whitespaceCodes","leadingWhitespaceRe","RegExp","trailingWhitespaceRe","allWhitespaceOrEmptyRe","wordOrNewlineRe","shrinkWrapAdd","text","inlineTextBuilder","transform","arguments","length","undefined","previouslyStashedSpace","stashedSpace","anyMatch","m","exec","startNewLine","testLeadingWhitespace","pushWord","concatWord","testTrailingWhitespace","wordRe","test","testContainsWords","module","exports"],"sources":["/home/klums24/Development/code/phase-5/p5-final-project/client/node_modules/html-to-text/lib/whitespace-processor.js"],"sourcesContent":["\n// eslint-disable-next-line no-unused-vars\nconst { InlineTextBuilder } = require('./inline-text-builder');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\nfunction charactersToCodes (str) {\n  return [...str]\n    .map(c => '\\\\u' + c.charCodeAt(0).toString(16).padStart(4, '0'))\n    .join('');\n}\n\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */\nclass WhitespaceProcessor {\n\n  /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */\n  constructor (options) {\n    this.whitespaceChars = (options.preserveNewlines)\n      ? options.whitespaceCharacters.replace(/\\n/g, '')\n      : options.whitespaceCharacters;\n    const whitespaceCodes = charactersToCodes(this.whitespaceChars);\n    this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);\n    this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);\n    this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);\n\n    if (options.preserveNewlines) {\n\n      const wordOrNewlineRe = new RegExp(`\\n|[^\\n${whitespaceCodes}]+`, 'gm');\n\n      /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       */\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = (str => str)) {\n        if (!text) { return; }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordOrNewlineRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (m[0] === '\\n') {\n            inlineTextBuilder.startNewLine();\n          } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordOrNewlineRe.exec(text)) !== null) {\n            if (m[0] === '\\n') {\n              inlineTextBuilder.startNewLine();\n            } else {\n              inlineTextBuilder.pushWord(transform(m[0]));\n            }\n          }\n        }\n        inlineTextBuilder.stashedSpace = (previouslyStashedSpace && !anyMatch) || (this.testTrailingWhitespace(text));\n        // No need to stash a space in case last added item was a new line,\n        // but that won't affect anything later anyway.\n      };\n\n    } else {\n\n      const wordRe = new RegExp(`[^${whitespaceCodes}]+`, 'g');\n\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = (str => str)) {\n        if (!text) { return; }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordRe.exec(text)) !== null) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          }\n        }\n        inlineTextBuilder.stashedSpace = (previouslyStashedSpace && !anyMatch) || this.testTrailingWhitespace(text);\n      };\n\n    }\n  }\n\n  /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testLeadingWhitespace (text) {\n    return this.leadingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text ends with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testTrailingWhitespace (text) {\n    return this.trailingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text contains any non-whitespace characters.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testContainsWords (text) {\n    return !this.allWhitespaceOrEmptyRe.test(text);\n  }\n\n}\n\nmodule.exports = { WhitespaceProcessor: WhitespaceProcessor };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}