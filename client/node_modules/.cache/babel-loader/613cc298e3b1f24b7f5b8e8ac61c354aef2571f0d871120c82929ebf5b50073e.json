{"ast":null,"code":"function getRow(matrix, j) {\n  if (!matrix[j]) {\n    matrix[j] = [];\n  }\n  return matrix[j];\n}\nfunction findFirstVacantIndex(row) {\n  let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  while (row[x]) {\n    x++;\n  }\n  return x;\n}\nfunction transposeInPlace(matrix, maxSize) {\n  for (let i = 0; i < maxSize; i++) {\n    const rowI = getRow(matrix, i);\n    for (let j = 0; j < i; j++) {\n      const rowJ = getRow(matrix, j);\n      const temp = rowI[j];\n      rowI[j] = rowJ[i];\n      rowJ[i] = temp;\n    }\n  }\n}\nfunction putCellIntoLayout(cell, layout, baseRow, baseCol) {\n  for (let r = 0; r < cell.rowspan; r++) {\n    const layoutRow = getRow(layout, baseRow + r);\n    for (let c = 0; c < cell.colspan; c++) {\n      layoutRow[baseCol + c] = cell;\n    }\n  }\n}\nfunction updateOffset(offsets, base, span, value) {\n  offsets[base + span] = Math.max(offsets[base + span] || 0, offsets[base] + value);\n}\n\n/**\n * @typedef { object } TablePrinterCell\n * Cell definition for the table printer.\n *\n * @property { number } colspan Number of columns this cell occupies.\n * @property { number } rowspan Number of rows this cell occupies.\n * @property { string } text Cell contents (pre-wrapped).\n */\n\n/**\n * Render a table into string.\n * Cells can contain multiline text and span across multiple rows and columns.\n *\n * Modifies cells to add lines array.\n *\n * @param { TablePrinterCell[][] } tableRows Table to render.\n * @param { number } rowSpacing Number of spaces between columns.\n * @param { number } colSpacing Number of empty lines between rows.\n * @returns { string }\n */\nfunction tableToString(tableRows, rowSpacing, colSpacing) {\n  const layout = [];\n  let colNumber = 0;\n  const rowNumber = tableRows.length;\n  const rowOffsets = [0];\n  // Fill the layout table and row offsets row-by-row.\n  for (let j = 0; j < rowNumber; j++) {\n    const layoutRow = getRow(layout, j);\n    const cells = tableRows[j];\n    let x = 0;\n    for (let i = 0; i < cells.length; i++) {\n      const cell = cells[i];\n      x = findFirstVacantIndex(layoutRow, x);\n      putCellIntoLayout(cell, layout, j, x);\n      x += cell.colspan;\n      cell.lines = cell.text.split('\\n');\n      const cellHeight = cell.lines.length;\n      updateOffset(rowOffsets, j, cell.rowspan, cellHeight + rowSpacing);\n    }\n    colNumber = layoutRow.length > colNumber ? layoutRow.length : colNumber;\n  }\n  transposeInPlace(layout, rowNumber > colNumber ? rowNumber : colNumber);\n  const outputLines = [];\n  const colOffsets = [0];\n  // Fill column offsets and output lines column-by-column.\n  for (let x = 0; x < colNumber; x++) {\n    let y = 0;\n    let cell;\n    while (y < rowNumber && (cell = layout[x][y])) {\n      if (!cell.rendered) {\n        let cellWidth = 0;\n        for (let j = 0; j < cell.lines.length; j++) {\n          const line = cell.lines[j];\n          const lineOffset = rowOffsets[y] + j;\n          outputLines[lineOffset] = (outputLines[lineOffset] || '').padEnd(colOffsets[x]) + line;\n          cellWidth = line.length > cellWidth ? line.length : cellWidth;\n        }\n        updateOffset(colOffsets, x, cell.colspan, cellWidth + colSpacing);\n        cell.rendered = true;\n      }\n      y += cell.rowspan;\n    }\n  }\n  return outputLines.join('\\n');\n}\nmodule.exports = {\n  tableToString: tableToString\n};","map":{"version":3,"names":["getRow","matrix","j","findFirstVacantIndex","row","x","arguments","length","undefined","transposeInPlace","maxSize","i","rowI","rowJ","temp","putCellIntoLayout","cell","layout","baseRow","baseCol","r","rowspan","layoutRow","c","colspan","updateOffset","offsets","base","span","value","Math","max","tableToString","tableRows","rowSpacing","colSpacing","colNumber","rowNumber","rowOffsets","cells","lines","text","split","cellHeight","outputLines","colOffsets","y","rendered","cellWidth","line","lineOffset","padEnd","join","module","exports"],"sources":["/home/klums24/Development/code/phase-5/p5-final-project/client/node_modules/html-to-text/lib/table-printer.js"],"sourcesContent":["\nfunction getRow (matrix, j) {\n  if (!matrix[j]) { matrix[j] = []; }\n  return matrix[j];\n}\n\nfunction findFirstVacantIndex (row, x = 0) {\n  while (row[x]) { x++; }\n  return x;\n}\n\nfunction transposeInPlace (matrix, maxSize) {\n  for (let i = 0; i < maxSize; i++) {\n    const rowI = getRow(matrix, i);\n    for (let j = 0; j < i; j++) {\n      const rowJ = getRow(matrix, j);\n      const temp = rowI[j];\n      rowI[j] = rowJ[i];\n      rowJ[i] = temp;\n    }\n  }\n}\n\nfunction putCellIntoLayout (cell, layout, baseRow, baseCol) {\n  for (let r = 0; r < cell.rowspan; r++) {\n    const layoutRow = getRow(layout, baseRow + r);\n    for (let c = 0; c < cell.colspan; c++) {\n      layoutRow[baseCol + c] = cell;\n    }\n  }\n}\n\nfunction updateOffset (offsets, base, span, value) {\n  offsets[base + span] = Math.max(\n    offsets[base + span] || 0,\n    offsets[base] + value\n  );\n}\n\n/**\n * @typedef { object } TablePrinterCell\n * Cell definition for the table printer.\n *\n * @property { number } colspan Number of columns this cell occupies.\n * @property { number } rowspan Number of rows this cell occupies.\n * @property { string } text Cell contents (pre-wrapped).\n */\n\n/**\n * Render a table into string.\n * Cells can contain multiline text and span across multiple rows and columns.\n *\n * Modifies cells to add lines array.\n *\n * @param { TablePrinterCell[][] } tableRows Table to render.\n * @param { number } rowSpacing Number of spaces between columns.\n * @param { number } colSpacing Number of empty lines between rows.\n * @returns { string }\n */\nfunction tableToString (tableRows, rowSpacing, colSpacing) {\n  const layout = [];\n  let colNumber = 0;\n  const rowNumber = tableRows.length;\n  const rowOffsets = [0];\n  // Fill the layout table and row offsets row-by-row.\n  for (let j = 0; j < rowNumber; j++) {\n    const layoutRow = getRow(layout, j);\n    const cells = tableRows[j];\n    let x = 0;\n    for (let i = 0; i < cells.length; i++) {\n      const cell = cells[i];\n      x = findFirstVacantIndex(layoutRow, x);\n      putCellIntoLayout(cell, layout, j, x);\n      x += cell.colspan;\n      cell.lines = cell.text.split('\\n');\n      const cellHeight = cell.lines.length;\n      updateOffset(rowOffsets, j, cell.rowspan, cellHeight + rowSpacing);\n    }\n    colNumber = (layoutRow.length > colNumber) ? layoutRow.length : colNumber;\n  }\n\n  transposeInPlace(layout, (rowNumber > colNumber) ? rowNumber : colNumber);\n\n  const outputLines = [];\n  const colOffsets = [0];\n  // Fill column offsets and output lines column-by-column.\n  for (let x = 0; x < colNumber; x++) {\n    let y = 0;\n    let cell;\n    while (y < rowNumber && (cell = layout[x][y])) {\n      if (!cell.rendered) {\n        let cellWidth = 0;\n        for (let j = 0; j < cell.lines.length; j++) {\n          const line = cell.lines[j];\n          const lineOffset = rowOffsets[y] + j;\n          outputLines[lineOffset] = (outputLines[lineOffset] || '').padEnd(colOffsets[x]) + line;\n          cellWidth = (line.length > cellWidth) ? line.length : cellWidth;\n        }\n        updateOffset(colOffsets, x, cell.colspan, cellWidth + colSpacing);\n        cell.rendered = true;\n      }\n      y += cell.rowspan;\n    }\n  }\n\n  return outputLines.join('\\n');\n}\n\nmodule.exports = { tableToString: tableToString };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}